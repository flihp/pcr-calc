#!/usr/bin/env python
#
# Copyright 2013 Philip Tricca <flihp@twobit.us>
#

import argparse
import sys
import txt

sys.path.insert(1, '@pythondir@/@PACKAGE@')

class mleHash_Prog (object):
    def __init__ (self):
        description = 'calculate SinitMleData.MleHash from MLE ELF'
        mle_help = 'path to file containing the MLE'
        arg_help = 'argument string passed to MLE'
        bin_help = 'dump hash in binary form'
        ver_help = 'version information'
        ver_str = '%(prog)s: @PACKAGE@ @VERSION@'
        
        parser = argparse.ArgumentParser(description=description)
        parser.add_argument('mle_file', help=mle_help)
        parser.add_argument('-a', '--arg-str', default=None, help=arg_help)
        parser.add_argument('-b', '--binary', help=bin_help, action='store_true')
        parser.add_argument('-v', '--version', help=ver_help, action='version', version=ver_str)
        args = parser.parse_args ()
        self._arg_str = args.arg_str
        self._bin_dump = args.binary
        self._mle_file = args.mle_file

    def open_file (self, fname, mode):
        try:
            return open (fname, mode)
        except IOError as e:
            sys.stderr.write ('unable to open file {0}: {1}\n'.format(e.filename, e.strerror))
            sys.exit (1)

    def run (self):
        mle_file = self.open_file (self._mle_file, 'rb')
        mle_util = txt.MLEUtil (self._arg_str, mle_file)
        try:
            mle_hdr = mle_util.get_mle_hdr ()
        except txt.MLEError as e:
            sys.stderr.write ('{0}\n'.format (e.message))
            sys.exit (1)

        mle_sha1 = mle_hdr.hash_sha1 ()
        if not self._bin_dump:
            print '{0}'.format (mle_sha1.hexdigest ())
        else:
            sys.stdout.write (mle_sha1.digest ())

if __name__ == "__main__":
    prog = mleHash_Prog ()
    prog.run ()
