#!/usr/bin/env python
#
# Copyright 2013 Philip Tricca <flihp@twobit.us>
#

import argparse
from elftools.elf.elffile import ELFFile
from elftools.common.exceptions import ELFError
from gzip import GzipFile
import mmap
import sys
import tempfile
import txt
import uuid

sys.path.insert(1, '@pythondir@/@PACKAGE@')

mle_uuid_str = '5aac8290-6f47-a774-0f5c-55a2cb51b642'
mle_uuid = uuid.UUID (mle_uuid_str)

def get_args ():
    description = 'calculate SinitMleData.MleHash from MLE ELF'
    mle_help = 'path to MLE file'
    arg_help = 'argument string passed to MLE'
    ver_help = 'version information'
    ver_str = '%(prog)s: @PACKAGE@ @VERSION@'

    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('mle', help=mle_help)
    parser.add_argument('-a', '--arg-str', default=None, help=arg_help)
    parser.add_argument('-v', '--version', help=ver_help, action='version', version=ver_str)
    return parser.parse_args()

def open_file (fname, mode):
    try:
        return open (fname, mode)
    except IOError as e:
        sys.stderr.write ('unable to open file {0}: {1}\n'.format(e.filename, e.strerror))
        sys.exit (1)

def get_elf (stream):
    try:
        return ELFFile (stream)
    except ELFError as e:
        sys.stderr.write ("ERROR: {0}\nfile must be an ELF, or gzipped ELF file\n".format (e))
        sys.exit (1)

def open_gzip (fobj):
    try:
        gz = GzipFile (fileobj=fobj)
        gz.read (1)
        gz.seek (0)
        return gz
    except IOError as e:
        return None

def cptmp_file (fobj):
    try:
        tmp_file = tempfile.TemporaryFile ()
        tmp_file.write (fobj.read ())
        return tmp_file
    except IOError as e:
        print 'failed to gunzip MLE file to a tempfile'
        sys.exit (1)

def main():
    args = get_args ()
    mle_file = open_file (args.mle, 'rb')
    gzip_file = open_gzip (mle_file)
    if gzip_file is not None:
        tmp_file = cptmp_file (gzip_file)
        gzip_file.close ()
        mle_file.close ()
        mle_file = tmp_file
    mle_mmap = mmap.mmap (mle_file.fileno (), 0, access=mmap.ACCESS_COPY)
    mle_elf = get_elf (mle_mmap)
    mle_mmap.seek (0)
    index = mle_mmap.find (mle_uuid.bytes)
    if index < 0:
        print 'file supplied is not an MLE.'
        sys.exit (1)
    mle_hdr = txt.mleHeader (mle_mmap, True, index)
    print 'MLE UUID         : {0}'.format (mle_hdr.uuid ())
    print 'length           : {0}'.format (mle_hdr.length ())
    print 'version          : {0}'.format (mle_hdr.version ())
    print 'entry_point      : {0}'.format (hex (mle_hdr.entry_point ()))
    print 'first_valid_page : {0}'.format (hex (mle_hdr.first_valid_page ()))
    print 'mle_start_off    : {0}'.format (hex (mle_hdr.mle_start_off ()))
    print 'mle_end_off      : {0}'.format (hex (mle_hdr.mle_end_off ()))
    print 'capabilities     : {0}'.format (hex (mle_hdr.capabilities ()))
    print 'cmdline_start_off: {0}'.format (hex (mle_hdr.cmdline_start_off ()))
    print 'cmdline_end_off  : {0}'.format (hex (mle_hdr.cmdline_end_off ()))

if __name__ == "__main__":
    main()
