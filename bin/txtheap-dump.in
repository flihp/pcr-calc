#!/usr/bin/env python
#
# Copyright 2013 Philip Tricca <flihp@twobit.us>
#

import argparse
import exceptions
import sys

sys.path.insert(1, '@pythondir@/@PACKAGE@')

import pcrutil
import txt

def main():
    description = 'Dump and optionally pretty-print TXT heap from /dev/mem'
    infile_help = 'file to read as TXT Heap instead of /dev/mem'
    mmap_help = 'access file through mmap'
    pp_help = 'parse and format binary heap to human readable form'
    ver_help = 'version information'
    ver_str = '%(prog)s: @PACKAGE@ @VERSION@'

    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('-v', '--version', help=ver_help, action='version', version=ver_str)
    parser.add_argument('-p', '--pretty', help=pp_help, action='store_true')
    parser.add_argument('-i', '--infile', help=infile_help, default='/dev/mem')
    parser.add_argument('-m', '--mmap', help=mmap_help, action='store_true')
    args = parser.parse_args()

    dev_mem = False
    if args.infile == '/dev/mem':
        dev_mem = True

    try:
        fd_infile = open (args.infile, 'rb')
    except IOError as e:
        sys.stderr.write ('Error opening {0} for reading: \"{1}\" ... Abort\n'.format(e.filename, e.strerror))
        sys.exit (1)

    try:
        txtPubRegs = txt.pubConfRegsParse (fd_infile, args.mmap, dev_mem)
    except IOError as e:
        sys.stderr.write ('Exception reading TXT public config registers: {0}\n'.format (e))
        sys.exit (1)

    try:
        heap = txt.txtHeap (fd_infile, args.mmap, txtPubRegs.HeapBase (), txtPubRegs.HeapSize ())
    except IOError as e:
        sys.stderr.write (('Exception reading TXT Heap: {0}').format (e))
        sys.exit (1)

    if args.pretty:
        txt.pp_PubConfRegs (txtPubRegs)
        txt.pp_TxtHeap (heap)

        sinitMle = txt.sinitMleData (heap.SinitMleData ())
        txt.pp_SinitToMle (sinitMle)

        osSinit = txt.osSinitData (heap.OsSinitData ())
        txt.pp_OsToSinit (osSinit)
    else:
        sys.stdout.write (heap.Bytes ())

    sys.exit (0)

if __name__ == "__main__":
   main ()
