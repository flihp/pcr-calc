#!/usr/bin/env python
#
# Copyright 2013 Philip Tricca <flihp@twobit.us>
#

import argparse
import base64
import hashlib
import os
import sys

sys.path.insert(1, '@pythondir@/@PACKAGE@')

msg_before  = 'PCREmu before extend: {0}'
msg_extend  = 'extending PCREmu with: {0}'
msg_pcr     = 'PCREmu after extend: {0}'
bytes20zero = '0000000000000000000000000000000000000000'

def main():
    description = 'PCR emulator.'
    pcrfile_help = 'File to hold PCR state. Defaults to ./tmp.pcr if omitted.'
    infile_help = 'File to read hash from.  Defaults to stdin if omitted.'
    ver_help = 'version information'
    ver_str = '%(prog)s: @PACKAGE@ @VERSION@'

    parser = argparse.ArgumentParser(description=description)
    parser.add_argument ('pcrfile', help=pcrfile_help, nargs='?', default='/tmp/tmp.pcr')
    parser.add_argument ('-i', '--in-file', help=infile_help)
    parser.add_argument('-v', '--version', help=ver_help, action='version', version=ver_str)
    args = parser.parse_args()

    try:
        if os.path.exists(args.pcrfile):
            fd_pcr = open (args.pcrfile, 'rb')
            pcr_val = fd_pcr.read (20)
            fd_pcr.close ()
        else:
            pcr_val = base64.b16decode (bytes20zero, True)
        fd_pcr = open (args.pcrfile, 'wb')
    except IOError as e:
        sys.stderr.write ('Error operating on {0}: \"{1}\" ... Abort\n'.format(e.filename, e.strerror))
        sys.exit (1)

    print msg_before.format (base64.b16encode (pcr_val))

    try:
        if args.in_file:
            fd_in = open (args.in_file, 'rb')
        else:
            fd_in = sys.stdin
        extend_val = fd_in.read ()
    except IOError as e:
        sys.stderr.write ('Error operating on {0}: \"{1}\" ... Abort\n'.format(e.filename, e.strerror))
        sys.exit (1)

    print msg_extend.format (base64.b16encode (extend_val))

    hash_pcr = hashlib.sha1 ()
    hash_pcr.update (pcr_val)
    hash_pcr.update (extend_val)
    print msg_pcr.format (hash_pcr.hexdigest ())
    fd_pcr.write (hash_pcr.digest ())

    sys.exit (0)

if __name__ == "__main__":
    main()
