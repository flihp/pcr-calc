#!/usr/bin/env python
#
# Copyright 2013 Philip Tricca <flihp@twobit.us>
#

import argparse
import hashlib
import sys

sys.path.insert(1, '@pythondir@/@PACKAGE@')

import txt

msg_extend = 'extending PCR[19] with: {0}'
msg_pcr = 'PCR[19]: {0}'
err_hash = 'Error hashing module {0}: "{1}" ... Abort\n'
err_read = 'Error opening {0} for reading: \"{1}\" ... Abort\n'

def string_pair (s):
    try:
        return map (str, s.split(','))
    except:
        raise argparse.ArgumentTypeError('format must be commandline,module')

def main():
    description = 'Calculate PCR[19] from modules.'
    mod_help = 'pair of files: commandline and module separated by a comma'
    ver_help = 'version information'
    ver_str = '%(prog)s: @PACKAGE@ @VERSION@'

    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('modules', metavar='N', nargs='+', type=string_pair, help=mod_help)
    parser.add_argument('-v', '--version', help=ver_help, action='version', version=ver_str)
    args = parser.parse_args()

    pcr19 = txt.pcrEmu ()
    for module in args.modules:
        try:
            fd_cmdline = open (module [0], 'r')
            fd_module = open (module [1], 'rb')
        except IOError as e:
            sys.stderr.write (err_read.format(e.filename, e.strerror))
            sys.exit (1)

        hasher = hashlib.sha1 ()
        mod_hash = txt.hash_module (fd_cmdline.readline (), fd_module)
        fd_cmdline.close ()
        fd_module.close ()
        print msg_extend.format (mod_hash.hexdigest ())
        pcr19.extend (mod_hash.digest ())

    print msg_pcr.format (pcr19.hexread ())
    sys.exit (0)

if __name__ == "__main__":
    main()
