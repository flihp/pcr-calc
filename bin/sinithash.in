#!/usr/bin/env python
#
# Copyright 2013 Philip Tricca <flihp@twobit.us>
#

import argparse
import base64
import hashlib
import exceptions
import sys

sys.path.insert(1, '@pythondir@/@PACKAGE@')

import txt

def main():
    description = 'calculate SinitMleData.SinitHash from ACM blob'
    acm_help = "path to ACM file"
    mmap_help = 'access file through mmap'
    smd_help = "Sinit to Mle Data Table Version.  Default is version 8."
    ver_help = 'version information'
    ver_str = '%(prog)s: @PACKAGE@ @VERSION@'

    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('acm', help=acm_help)
    parser.add_argument('-m', '--mmap', help=mmap_help, action='store_true')
    parser.add_argument('-s', '--smd', default=8, help=smd_help, type=int)
    parser.add_argument('-v', '--version', help=ver_help, action='version', version=ver_str)
    args = parser.parse_args()

    try:
        f = open (args.acm, 'rb')
    except IOError as e:
        sys.stderr.write ('Error opening {0} for reading: \"{1}\" ... Abort\n'.format(e.filename, e.strerror))
        sys.exit (1)
    
    # Value of PCR[17] after initial extend = SinitMleData.SinitHash
    #   PCR[17] is initialized to 20 bytes of 0's on platform reset.
    # SinitMleData.SinitHash = sha1 (20x0s | shaX(ACM) | EDX Flags)
    acm = txt.acmParse (f, args.mmap, args.smd)
    hash_data = hashlib.sha1 ()
    hash_data.update (acm.Digest ())
    hash_data.update (base64.b16decode(b'00000000'))

    pcr17 = txt.pcrEmu ()
    pcr17.extend (hash_data.digest ())
    print "SinitMleData.SinitHash:\n  {0}".format (pcr17.hexread ())

if __name__ == "__main__":
   main ()
