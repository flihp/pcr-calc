#!/usr/bin/env python
#
# Copyright 2013 Philip Tricca <flihp@twobit.us>
#

import argparse
import hashlib
import sys

sys.path.insert(1, '@pythondir@/@PACKAGE@')

import txt

msg_pcr = 'PCR[18]: {0}'
err_open = 'Error opening {0} for reading: \"{1}\" ... Abort\n'
err_heap = 'Error reading TXT Heap: {0}\n'

def get_args ():
    description = "Calculate PCR[18] from a TXT Heap"
    cmd_help = 'file containing command line for module'
    mmap_help = 'access file through mmap'
    mod_help = 'module file'
    mle_args_help = 'MLE arguments'
    mle_help = 'ELF file containing the MLE'
    ver_help = "version information"
    ver_str = "%(prog)s: @PACKAGE@ @VERSION@"

    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('-v', '--version', help=ver_help, action='version', version=ver_str)
    parser.add_argument('-e', '--mle-elf', help=mle_help, required=True)
    parser.add_argument('-a', '--mle-args', help=mle_args_help, required=True)
    parser.add_argument('-m', '--mmap', help=mmap_help, action='store_true')
    parser.add_argument('-o', '--module', help=mod_help)
    parser.add_argument('-c', '--cmdline', help=cmd_help)
    return parser.parse_args()

def open_file (fname, mode):
    try:
        fd = open (fname, mode)
    except IOError as e:
        sys.stderr.write (err_open.format(e.filename, e.strerror))
        sys.exit (1)
    return fd

def main():
    args = get_args ()

    fd_mle = open_file (args.mle_elf, 'rb')
    fd_cmdline = open_file (args.cmdline, 'r')
    fd_module = open_file (args.module, 'rb')

    mle_util = txt.MLEUtil (args.mle_args, fd_mle)
    try:
        mle_hdr = mle_util.get_mle_hdr ()
    except txt.MLEError as e:
        sys.stderr.write ('{0}\n'.format (e.message))
        sys.exit (1)
    print 'MLE Hash: {0}'.format (mle_hdr.hash_sha1 ().hexdigest ())

    mod_hash = txt.hash_module (fd_cmdline.readline (), fd_module)
    fd_cmdline.close ()
    fd_module.close ()
    print 'module hash: {0}'.format (mod_hash.hexdigest ())

    pcr18 = txt.pcrEmu ()
    pcr18.extend (mle_hdr.hash_sha1 ().digest ())
    pcr18.extend (mod_hash.digest ())
    print msg_pcr.format (pcr18.hexread ())

    sys.exit (0)

if __name__ == "__main__":
    main()
