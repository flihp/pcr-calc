#!/usr/bin/env python
#
# Copyright 2013 Philip Tricca <flihp@twobit.us>
#

import argparse
import sys

sys.path.insert(1, '@pythondir@/@PACKAGE@')

import txt

def get_args ():
    description = "Calculate hash from command line and module binary"
    bin_help = 'output hash in binary form'
    cmd_help = 'file containing command line for module'
    mod_help = 'module file'
    ver_help = "version information"
    ver_str = "%(prog)s: @PACKAGE@ @VERSION@"

    parser = argparse.ArgumentParser (description=description)
    parser.add_argument ('-v', '--version', help=ver_help, action='version', version=ver_str)
    parser.add_argument ('-m', '--module', help=mod_help, required=True)
    parser.add_argument ('-c', '--cmdline', help=cmd_help)
    parser.add_argument ('-b', '--binary', help=bin_help, action='store_true', default=False)
    return parser.parse_args ()

def open_file (fname, mode):
    try:
        fd = open (fname, mode)
    except IOError as e:
        sys.stderr.write (err_open.format(e.filename, e.strerror))
        sys.exit (1)
    return fd

def main ():
    args = get_args ()
    fd_module = open_file (args.module, 'rb')
    if args.cmdline:
        fd_cmdline = open_file (args.cmdline, 'r')
        mod_hash = txt.hash_module (fd_cmdline.readline (), fd_module)
    else:
        mod_hash = txt.hash_module ('', fd_module)
    if not args.binary:
        print '{0}'.format (mod_hash.hexdigest ())
    else:
        sys.stdout.write (mod_hash.digest ())
    sys.exit (0)

if __name__ == "__main__":
    main ()
